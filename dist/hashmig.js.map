{"version":3,"file":"hashmig.js","sources":["../env.ts","../src/DbHelper.ts","../src/Logger.ts","../src/Hashmig.ts","../src/SQLHash.ts","../src/ConfigLoader.ts","../src/Interact.ts","../src/index.ts"],"sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\n","import mysql, { ConnectionOptions, Connection } from 'mysql2';\n\nexport default class DbHelper {\n  private conn: Connection | undefined;\n\n  constructor(access: ConnectionOptions) {\n    this.connect(access);\n  }\n  private connect(access: ConnectionOptions) {\n    this.conn = mysql.createConnection(access);\n  }\n\n  public async query(sql: string, values?: any) {\n    return new Promise((resolve, reject) => {\n      if (!this.conn) {\n        reject('Connection is not established');\n      }\n      this.conn?.query(sql, values, (err, results) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  public async execute(sql: string, values?: any) {\n    return new Promise((resolve, reject) => {\n      if (!this.conn) {\n        reject('Connection is not established');\n      }\n      this.conn?.execute(sql, values, (err, results) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n  }\n}\n","import { LoggerEngine } from './interfaces';\nimport kleur from 'kleur';\n\nexport default class Logger implements LoggerEngine {\n  private readonly silent: boolean = false;\n\n  constructor(silent = false) {\n    this.silent = silent;\n  }\n\n  public log(message: string): void {\n    !this.silent && console.log(kleur.gray().italic(message));\n  }\n\n  public info(message: string): void {\n    !this.silent && console.log(kleur.green().italic(message));\n  }\n\n  public warn(message: string): void {\n    !this.silent && console.warn(kleur.red().italic(message));\n  }\n\n  public error(message: string): void {\n    !this.silent && console.error(kleur.red().italic(message));\n  }\n\n  public success(message: string): void {\n    !this.silent && console.log(kleur.bgGreen().bold(message));\n  }\n}\n","import * as fs from 'fs';\n\nimport DbHelper from './DbHelper';\nimport {\n  DBFunctionRow,\n  DBFunctionSourceRow,\n  DBMigrationRow,\n  DBProcedureRow,\n  DBProcedureSourceRow,\n  HashmigConfig,\n  LoggerEngine\n} from './interfaces';\nimport Logger from './Logger';\nimport SQLHash from './SQLHash';\n\nexport default class Hashmig {\n  private db: DbHelper;\n\n  private readonly folder: string;\n\n  private readonly database: string | undefined;\n  private readonly table: string;\n\n  private logger: LoggerEngine = {\n    log: () => {},\n    info: () => {},\n    warn: () => {},\n    error: () => {},\n    success: () => {}\n  };\n\n  constructor(options?: HashmigConfig) {\n    this.folder = options?.folder || './hashmig_migrations';\n\n    this.table = options?.table || 'hashmig_migrations';\n    this.database = options?.db?.database || process.env.DB_SELECT;\n\n    this.initLogger(options?.logger, options?.silent);\n\n    this.db = new DbHelper(\n      options?.db || {\n        port: +(process.env.DB_PORT || 3306),\n        host: process.env.DB_SERVER,\n        database: process.env.DB_SELECT,\n        user: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n        ssl: { rejectUnauthorized: false }\n      }\n    );\n  }\n\n  private initLogger(logger?: LoggerEngine, silent?: boolean) {\n    if (silent) {\n      return;\n    }\n\n    if (this.instanceOfLoggerEngine(logger || {})) {\n      this.logger = logger as LoggerEngine;\n      return;\n    }\n\n    this.logger = new Logger();\n  }\n\n  private instanceOfLoggerEngine(object: any): object is LoggerEngine {\n    return ['log', 'info', 'warn', 'error', 'success'].reduce(\n      (result, method) => result && method in object,\n      true\n    );\n  }\n\n  public isMigrationsFolderExists(): boolean {\n    return fs.existsSync(this.folder);\n  }\n\n  public createMigrationsFolder() {\n    fs.mkdirSync(this.folder);\n  }\n\n  public async getProcedures(): Promise<{ Name: string; Modified: string }[]> {\n    return this.db\n      .query(`SHOW PROCEDURE STATUS WHERE Db = '${this.database}'`)\n      .then((results) => results as DBProcedureRow[])\n      .then((rows) =>\n        rows.map((row) => ({ Name: row.Name, Modified: row.Modified }))\n      );\n  }\n\n  public async getFunctions(): Promise<{ Name: string; Modified: string }[]> {\n    return this.db\n      .query(`SHOW FUNCTION STATUS WHERE Db = '${this.database}'`)\n      .then((results) => results as DBFunctionRow[])\n      .then((rows) =>\n        rows.map((row) => ({ Name: row.Name, Modified: row.Modified }))\n      );\n  }\n\n  public async getProcedureSource(name: string): Promise<string> {\n    return this.db\n      .query(`SHOW CREATE PROCEDURE ${name}`)\n      .then((results) => results as DBProcedureSourceRow[])\n      .then((results) => results[0]['Create Procedure']);\n  }\n\n  public async getFunctionSource(name: string): Promise<string> {\n    return this.db\n      .query(`SHOW CREATE FUNCTION ${name}`)\n      .then((results) => results as DBFunctionSourceRow[])\n      .then((results) => results[0]['Create Function']);\n  }\n\n  public async isMigrationsTableExists(): Promise<boolean> {\n    return this.db\n      .query(`SHOW TABLES LIKE '${this.table}'`)\n      .then((results) => results as { TABLE_NAME: string }[])\n      .then((results) => results.length > 0);\n  }\n\n  public async createMigrationsTable(): Promise<any> {\n    return this.db.query(`\n        CREATE TABLE ${this.table}\n        (\n            ID        INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n            FileName  VARCHAR(255)                   NOT NULL,\n            Hash      VARCHAR(312)                   NOT NULL,\n            Type      ENUM ('procedure', 'function') NOT NULL,\n            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n    `);\n  }\n\n  public async getMigrations(): Promise<DBMigrationRow[]> {\n    return (await this.db.query(`\n      SELECT FileName, Hash, Type\n       FROM ${this.table}\n       WHERE ID IN (\n          SELECT MAX(ID) FROM ${this.table} GROUP BY FileName\n       )\n    `)) as Promise<DBMigrationRow[]>;\n  }\n\n  public async initProcedures(procedures: string[]) {\n    const errors = [];\n    let i = 0;\n    for (const procedure of procedures) {\n      i++;\n      try {\n        await this.initProcedure(procedure);\n        this.logger.info(\n          `     ${i}. migration for procedure ${procedure} initialized`\n        );\n      } catch (error) {\n        errors.push(procedure);\n        this.logger.error(\n          `     ${i}. migration for procedure ${procedure} not initialized: ${\n            (error as Error).message\n          }`\n        );\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.error(\n        `     - migrations for procedures ${errors.join(', ')} not initialized`\n      );\n    }\n  }\n\n  private async initProcedure(procedure: string) {\n    let source = await this.getProcedureSource(procedure);\n    source = source.replace(/DEFINER=`[^`]+`@`[^`]+`/, '');\n    source = `DROP PROCEDURE IF EXISTS \\`${procedure}\\`;\n-- NEW_COMMAND\n${source}`;\n    const hash = this.getHash(source);\n    const fileName = `p_${procedure}.sql`;\n\n    fs.writeFileSync(`${this.folder}/${fileName}`, source);\n\n    await this.db.query(\n      `INSERT INTO ${this.table} (FileName, Hash, Type)\n                         VALUES (?, ?, 'procedure')`,\n      [fileName, hash]\n    );\n  }\n\n  public async initFunctions(functions: string[]) {\n    const errors = [];\n    let i = 0;\n    for (const func of functions) {\n      i++;\n      try {\n        await this.initFunction(func);\n        this.logger.info(\n          `     ${i}. migration for function ${func} initialized`\n        );\n      } catch (error) {\n        errors.push(func);\n        this.logger.error(\n          `     ${i}. migration for function ${func} not initialized: ${\n            (error as Error).message\n          }`\n        );\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.error(\n        `     - migrations for functions ${errors.join(', ')} not initialized`\n      );\n    }\n  }\n\n  private async initFunction(func: string) {\n    let source = await this.getFunctionSource(func);\n    source = source.replace(/DEFINER=`[^`]+`@`[^`]+`/, '');\n    source = `DROP PROCEDURE IF EXISTS \\`${func}\\`;\n-- NEW_COMMAND\n${source}`;\n    const hash = this.getHash(source);\n    const fileName = `f_${func}.sql`;\n\n    fs.writeFileSync(`${this.folder}/${fileName}`, source);\n\n    await this.db.query(\n      `INSERT INTO ${this.table} (FileName, Hash, Type)\n                         VALUES (?, ?, 'function')`,\n      [fileName, hash]\n    );\n  }\n\n  private getHash(source: string) {\n    return SQLHash(source);\n    // return crypto.createHash('sha256').update(source).digest('hex');\n  }\n\n  public async getMigrationsFiles(): Promise<Map<string, string>> {\n    const map = new Map();\n    const files = fs.readdirSync(this.folder);\n    for (const file of files) {\n      const source = fs.readFileSync(`${this.folder}/${file}`).toString();\n      const hash = this.getHash(source);\n      map.set(hash, file);\n    }\n    return map;\n  }\n\n  public async getMigrationsToRun(debug = false): Promise<Map<string, string>> {\n    const [dbMigrations, dbFileMigration] = await this.getMigrations().then(\n      (rows) =>\n        rows.reduce(\n          ([map, mapFile], row) => {\n            map.set(row.Hash, row.FileName);\n            mapFile.set(row.FileName, row.Hash);\n            return [map, mapFile];\n          },\n          [new Map(), new Map()]\n        )\n    );\n    const filesMap = await this.getMigrationsFiles();\n\n    for (const [hash, file] of filesMap) {\n      if (dbMigrations.has(hash) && dbMigrations.get(hash) === file) {\n        // this.logger.log(`     - ${file} already migrated`);\n        filesMap.delete(hash);\n      } else {\n        const msg =\n          `     + ${file} will be migrated` +\n          (debug\n            ? ` (file hash ${hash} != db hash ${\n                dbFileMigration.has(file) ? dbFileMigration.get(file) : '-'\n              })`\n            : '');\n        this.logger.log(msg);\n      }\n    }\n\n    return filesMap;\n  }\n\n  public async runMigrations(files: string[]) {\n    const errors = [];\n    let i = 0;\n    for (const file of files) {\n      i++;\n      try {\n        await this.migrateFile(file);\n        this.logger.info(`     ${i}. migration for file ${file} completed`);\n      } catch (error) {\n        errors.push(file);\n        this.logger.error(\n          `     ${i}. migration for file ${file} not completed: ${\n            (error as Error).message\n          }`\n        );\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.error(\n        `     - migrations for files ${errors.join(', ')} not completed`\n      );\n    }\n  }\n\n  private async migrateFile(file: string) {\n    const source = fs.readFileSync(`${this.folder}/${file}`).toString();\n    const hash = this.getHash(source);\n\n    await this.runFileSql(source);\n    await this.db.query(\n      `INSERT INTO ${this.table} (FileName, Hash, Type)\n                         VALUES (?, ?, 'function')`,\n      [file, hash]\n    );\n  }\n\n  public async clear() {\n    await this.clearDb();\n    this.clearFolder();\n  }\n\n  private async clearDb() {\n    await this.db.query(`DROP TABLE IF EXISTS ${this.table}`);\n    this.logger.success('--- Migrations table dropped');\n  }\n\n  private clearFolder() {\n    fs.rmSync(this.folder, { recursive: true, force: true });\n    this.logger.success('--- Migrations folder removed');\n  }\n\n  private async runFileSql(sql: string) {\n    const commands = sql.toString().split('NEW_COMMAND');\n    return Promise.all(\n      commands\n        .map((command) => command.trim())\n        .filter(Boolean)\n        .map((command) => this.db.query(command))\n    );\n  }\n}\n","import crypto from 'crypto';\n\nconst SQLHash = (sql: string, marker = '_@#$^*_') => {\n  const parts: string[] = [];\n  let i = -1;\n  let source = sql\n    .replace(/[\\n\\r]/g, ' ')\n    .replace(/\\t/g, ' ')\n    .replace(/\\\\'/g, `${marker}single${marker}`)\n    .replace(/\\\\\"/g, `${marker}double${marker}`)\n    .replace(/'.*?'/g, (match) => {\n      parts.push(match);\n      i++;\n      return `${marker}${i}${marker}`;\n    })\n    .replace(/\".*?\"/g, (match) => {\n      parts.push(match);\n      i++;\n      return `${marker}${i}${marker}`;\n    })\n    .replace(/\\s{2,}/g, ' ');\n\n  parts.forEach((part, i) => {\n    source = source.replace(`${marker}${i}${marker}`, part);\n  });\n\n  return crypto.createHash('sha256').update(source).digest('hex');\n};\n\nexport default SQLHash;\n","import { HashmigConfig } from './interfaces';\nimport fs from 'fs';\nimport { z } from 'zod';\nimport Pipe from '@rsol/pipe';\n\nexport default class ConfigLoader {\n  private static fileName = './hashmig.config.json';\n\n  public static getConfig(\n    configFileName = './hashmig.config.json'\n  ): HashmigConfig | null {\n    this.fileName = configFileName;\n    const fileConfig = this.loadConfigFromFile();\n    if (fileConfig) {\n      return fileConfig;\n    }\n    const envConfig = this.getConfigFromEnv();\n    if (envConfig) {\n      return envConfig;\n    }\n    return null;\n  }\n\n  private static getConfigFromEnv(): HashmigConfig {\n    const config = {\n      db: {\n        port: +(process.env.DB_PORT || 3306),\n        host: process.env.DB_SERVER,\n        database: process.env.DB_SELECT,\n        user: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n        ssl: { rejectUnauthorized: false }\n      },\n      folder: process.env.HASHMIG_FOLDER || './hashmig_migrations',\n      table: process.env.HASHMIG_TABLE || 'hashmig_migrations',\n      silent: process.env.HASHMIG_SILENT === 'true'\n    };\n\n    return this.validateAndFillConfig(config) as HashmigConfig;\n  }\n\n  private static loadConfigFromFile(): HashmigConfig | null {\n    if (!fs.existsSync(`${this.fileName}`)) {\n      return null;\n    }\n    const json = fs.readFileSync(`${this.fileName}`).toString();\n    return this.validateAndFillConfig(JSON.parse(json));\n  }\n\n  private static validateAndFillConfig(\n    config: HashmigConfig\n  ): HashmigConfig | null {\n    const configSchema = z.object({\n      db: z.object({\n        port: z.string().or(z.number()),\n        host: z.string(),\n        database: z.string(),\n        user: z.string(),\n        password: z.string(),\n        ssl: z.object({ rejectUnauthorized: z.boolean().or(z.string()) })\n      }),\n      folder: z.string(),\n      table: z.string(),\n      silent: z.string().or(z.boolean())\n    });\n\n    try {\n      configSchema.parse(config);\n\n      const trueConfigSchema = z.object({\n        db: z.object({\n          port: z.number(),\n          host: z.string(),\n          database: z.string(),\n          user: z.string(),\n          password: z.string(),\n          ssl: z.object({ rejectUnauthorized: z.boolean() })\n        }),\n        folder: z.string(),\n        table: z.string(),\n        silent: z.boolean()\n      });\n\n      const pipe = new Pipe().addHandler(\n        'env',\n        () => (str, initialValueString) =>\n          process.env[str] || initialValueString\n      );\n\n      const trueConfig = {\n        db: {\n          port: pipe.pipe(`${config.db?.port || 3306}|toInt`),\n          host: pipe.pipe(config.db?.host || ''),\n          database: pipe.pipe(config.db?.database || ''),\n          user: pipe.pipe(config.db?.user || ''),\n          password: pipe.pipe(config.db?.password || ''),\n          ssl: config.db.ssl\n        },\n        folder: pipe.pipe(config.folder || ''),\n        table: pipe.pipe(config.table || ''),\n        silent:\n          config.silent === true\n            ? true\n            : config.silent === false\n              ? false\n              : pipe.pipe(config.silent || 'false|toBool')\n      };\n\n      return trueConfigSchema.parse(trueConfig) as HashmigConfig;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }\n}\n","import prompts from 'prompts';\nimport { Command } from 'commander';\nimport Hashmig from './Hashmig';\nimport Logger from './Logger';\nimport ConfigLoader from './ConfigLoader';\n\nconst program = new Command();\n\nexport default class Interact {\n  private hashmig: Hashmig;\n  private logger: Logger;\n\n  private isInteractive = true;\n  private debug = false;\n\n  constructor() {\n    this.logger = new Logger();\n    this.hashmig = new Hashmig();\n  }\n\n  init(configFileName?: string) {\n    const config = ConfigLoader.getConfig(configFileName);\n    if (!config) {\n      console.log('Config not found');\n      process.exit(1);\n    }\n\n    this.hashmig = new Hashmig({\n      ...config,\n      silent: false\n    });\n  }\n\n  main = async () => {\n    program\n      .name('hashmig')\n      .description(\n        'CLI migrations tool for MySQL stored procedures and functions'\n      )\n      .version('1.0.5')\n      .option(\n        '-c, --config <string>',\n        'Path to config file',\n        './hashmig.config.json'\n      )\n      .hook('preAction', (thisArg) => {\n        const { config: configFileName } = thisArg.opts();\n        this.init(configFileName);\n      });\n\n    program.addHelpText(\n      'after',\n      `\n\nTo configure, you can use \\`./hashmig.config.json\\` (see \\`./hashmig.example.config.json\\`) file or the following environment variables:\n  DB_PORT - post number\n  DB_SERVER - server address\n  DB_SELECT - database name\n  DB_USERNAME - username\n  DB_PASSWORD - password\n  HASHMIG_FOLDER - path to folder with migrations\n  HASHMIG_TABLE - name of table with migrations\n  HASHMIG_SILENT - disable logger`\n    );\n\n    program\n      .command('run')\n      .description('Execute migrations')\n      .option('-n, --noninteractive', 'Non-interactive mode', false)\n      .option('-d, --debug', 'Debug mode', false)\n      .action((options) => {\n        const { noninteractive = false, debug = false } = options;\n        this.isInteractive = !noninteractive;\n        this.debug = debug;\n\n        (async () => {\n          // ----------------------------------- Table -----------------------------------\n          let result = await this.createMigrationsTableExists();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Folder -----------------------------------\n          result = await this.createMigrationFolder();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Init -----------------------------------\n          this.isInteractive && (await this.initMigrations());\n\n          // ----------------------------------- Run -----------------------------------\n          await this.runMigrations();\n\n          process.exit(0);\n        })();\n      });\n\n    program\n      .command('clear')\n      .description('Clear folder and table')\n      .action(() => {\n        (async () => {\n          const { value } = await prompts({\n            type: 'toggle',\n            name: 'value',\n            message: 'Are you sure to delete table and folder?',\n            initial: true,\n            active: 'yes',\n            inactive: 'no'\n          });\n\n          if (!value) {\n            process.exit(0);\n          }\n\n          await this.hashmig.clear();\n        })();\n      });\n\n    program\n      .command('init')\n      .description(\n        'Fill table and folder by existing stored procedures and functions'\n      )\n      .action(() => {\n        (async () => {\n          // ----------------------------------- Table -----------------------------------\n          let result = await this.createMigrationsTableExists();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Folder -----------------------------------\n          result = await this.createMigrationFolder();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Init -----------------------------------\n          await this.initMigrations(true);\n        })();\n      });\n\n    program.parse();\n  };\n\n  createMigrationsTableExists = async () => {\n    const isMigrationsTableExists =\n      await this.hashmig.isMigrationsTableExists();\n    if (isMigrationsTableExists) {\n      return true;\n    }\n\n    await this.hashmig.createMigrationsTable();\n    this.logger.success('--- Migration table created');\n\n    return true;\n  };\n\n  createMigrationFolder = async () => {\n    const isMigrationFolderExists = this.hashmig.isMigrationsFolderExists();\n    if (isMigrationFolderExists) {\n      return true;\n    }\n\n    this.hashmig.createMigrationsFolder();\n    this.logger.success('--- Migration folder created');\n\n    return true;\n  };\n\n  initMigrations = async (required = false) => {\n    const migrations = await this.hashmig.getMigrations();\n    if (!required && migrations.length > 0) {\n      return;\n    }\n\n    const { value } = await prompts({\n      type: 'toggle',\n      name: 'value',\n      message:\n        'Would you like to initialize migrations by existing stored procedures and functions it?',\n      initial: true,\n      active: 'yes',\n      inactive: 'no'\n    });\n\n    if (!value) {\n      this.logger.error('--- Migrations don\\'t initialized');\n      return;\n    }\n\n    const functions = await this.hashmig.getFunctions();\n    const { value: selectedFunctions } = await prompts({\n      type: 'multiselect',\n      name: 'value',\n      message: 'Select functions',\n      choices: functions.map((func) => ({\n        title: func.Name,\n        value: func.Name,\n        selected: true\n      }))\n    });\n\n    const procedures = await this.hashmig.getProcedures();\n    const { value: selectedProcedures } = await prompts({\n      type: 'multiselect',\n      name: 'value',\n      message: 'Select procedures',\n      choices: procedures.map((proc) => ({\n        title: proc.Name,\n        value: proc.Name,\n        selected: true\n      }))\n    });\n\n    if (selectedProcedures.length > 0) {\n      await this.hashmig.initProcedures(selectedProcedures);\n      this.logger.success('--- Migration for procedures initialized');\n    }\n\n    if (selectedFunctions.length > 0) {\n      await this.hashmig.initFunctions(selectedFunctions);\n      this.logger.success('--- Migration for functions initialized');\n    }\n  };\n\n  runMigrations = async () => {\n    const migrations = await this.hashmig.getMigrationsToRun(this.debug);\n\n    if (migrations.size === 0) {\n      this.logger.success('--- All migrations already completed');\n      return;\n    }\n\n    if (!this.isInteractive) {\n      await this.hashmig.runMigrations(Array.from(migrations.values()));\n      this.logger.success('--- Migrations completed');\n      return;\n    }\n\n    const { value: selectedFiles } = await prompts({\n      type: 'multiselect',\n      name: 'value',\n      message: 'Select files to run',\n      choices: Array.from(migrations.values()).map((file) => ({\n        title: file,\n        value: file,\n        selected: true\n      }))\n    });\n\n    if (selectedFiles.length === 0) {\n      this.logger.error('--- No one file selected');\n      return;\n    }\n\n    await this.hashmig.runMigrations(selectedFiles);\n\n    this.logger.success('--- Migrations completed');\n  };\n}\n","#!/usr/bin/env node\n\nimport '../env';\nimport Interact from './Interact';\n\n(async () => {\n  return new Interact().main();\n})();\n"],"names":["dotenv","config","DbHelper","access","conn","this","connect","_proto","prototype","mysql","createConnection","query","sql","values","_this","Promise","resolve","reject","_this$conn","err","results","e","execute","_this2","_this2$conn","Logger","silent","log","message","console","kleur","gray","italic","info","green","warn","red","error","success","bgGreen","bold","Hashmig","options","_options$db","db","folder","database","table","logger","process","env","DB_SELECT","initLogger","port","DB_PORT","host","DB_SERVER","user","DB_USERNAME","password","DB_PASSWORD","ssl","rejectUnauthorized","instanceOfLoggerEngine","object","reduce","result","method","isMigrationsFolderExists","fs","existsSync","createMigrationsFolder","mkdirSync","getProcedures","then","rows","map","row","Name","Modified","getFunctions","getProcedureSource","name","getFunctionSource","isMigrationsTableExists","length","createMigrationsTable","_this6","getMigrations","_this7","initProcedures","procedures","_temp3","errors","_this8","join","i","_temp2","_forOf","procedure","_temp","_catch","initProcedure","push","_this9","source","replace","hash","getHash","fileName","writeFileSync","initFunctions","functions","_temp6","_this10","_temp5","func","_temp4","initFunction","_this11","marker","parts","match","forEach","part","crypto","createHash","update","digest","SQLHash","getMigrationsFiles","_step","_this12","Map","_iterator","_createForOfIteratorHelperLoose","readdirSync","done","file","value","readFileSync","toString","set","getMigrationsToRun","debug","_this13","_ref","mapFile","Hash","FileName","_ref2","dbMigrations","dbFileMigration","filesMap","_step2","_iterator2","_step2$value","has","get","msg","runMigrations","files","_temp9","_this14","_temp8","_temp7","migrateFile","_this15","runFileSql","clear","_this16","clearDb","clearFolder","_this17","rmSync","recursive","force","_this18","commands","split","all","command","trim","filter","Boolean","_iteratorSymbol","Symbol","iterator","_settle","pact","state","s","_Pact","o","bind","v","observer","onFulfilled","onRejected","callback","_isSettledPact","thenable","body","check","target","step","_cycle","next","_fixup","TypeError","array","_forTo","ConfigLoader","getConfig","configFileName","loadConfigFromFile","getConfigFromEnv","HASHMIG_FOLDER","HASHMIG_TABLE","HASHMIG_SILENT","validateAndFillConfig","json","JSON","parse","configSchema","z","string","or","number","_config$db","_config$db2","_config$db3","_config$db4","_config$db5","trueConfigSchema","pipe","Pipe","addHandler","str","initialValueString","trueConfig","program","Command","Interact","_this3","_this4","_this5","hashmig","isInteractive","main","description","version","option","hook","thisArg","_thisArg$opts","opts","init","addHelpText","action","_options$noninteracti","noninteractive","_options$debug","createMigrationsTableExists","exit","createMigrationFolder","_this$createMigration","_this$initMigrations","_this$isInteractive","initMigrations","prompts","type","initial","active","inactive","_this$createMigration2","required","migrations","choices","title","selected","_ref3","selectedFunctions","proc","_ref4","selectedProcedures","_exit","_result","Array","from","_ref5","selectedFiles","size","_extends"],"mappings":"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"}