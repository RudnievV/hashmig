{"version":3,"file":"hashmig.js","sources":["../env.ts","../src/DbHelper.ts","../src/Logger.ts","../src/Hashmig.ts","../src/SQLHash.ts","../src/ConfigLoader.ts","../src/Interact.ts","../src/index.ts"],"sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\n","import mysql, { ConnectionOptions, Connection } from 'mysql2';\n\nexport default class DbHelper {\n  private conn: Connection | undefined;\n\n  constructor(access: ConnectionOptions) {\n    this.connect(access);\n  }\n  private connect(access: ConnectionOptions) {\n    this.conn = mysql.createConnection(access);\n  }\n\n  public async query(sql: string, values?: any) {\n    return new Promise((resolve, reject) => {\n      if (!this.conn) {\n        reject('Connection is not established');\n      }\n      this.conn?.query(sql, values, (err, results) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  public async execute(sql: string, values?: any) {\n    return new Promise((resolve, reject) => {\n      if (!this.conn) {\n        reject('Connection is not established');\n      }\n      this.conn?.execute(sql, values, (err, results) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n  }\n}\n","import { LoggerEngine } from './interfaces';\nimport kleur from 'kleur';\n\nexport default class Logger implements LoggerEngine {\n  private readonly silent: boolean = false;\n\n  constructor(silent = false) {\n    this.silent = silent;\n  }\n\n  public log(message: string): void {\n    !this.silent && console.log(kleur.gray().italic(message));\n  }\n\n  public info(message: string): void {\n    !this.silent && console.log(kleur.green().italic(message));\n  }\n\n  public warn(message: string): void {\n    !this.silent && console.warn(kleur.red().italic(message));\n  }\n\n  public error(message: string): void {\n    !this.silent && console.error(kleur.red().italic(message));\n  }\n\n  public success(message: string): void {\n    !this.silent && console.log(kleur.bgGreen().bold(message));\n  }\n}\n","import * as fs from 'fs';\n\nimport DbHelper from './DbHelper';\nimport {\n  DBFunctionRow,\n  DBFunctionSourceRow,\n  DBMigrationRow,\n  DBProcedureRow,\n  DBProcedureSourceRow,\n  HashmigConfig,\n  LoggerEngine\n} from './interfaces';\nimport Logger from './Logger';\nimport SQLHash from './SQLHash';\n\nexport default class Hashmig {\n  private db: DbHelper;\n\n  private readonly folder: string;\n\n  private readonly database: string | undefined;\n  private readonly table: string;\n\n  private logger: LoggerEngine = {\n    log: () => {},\n    info: () => {},\n    warn: () => {},\n    error: () => {},\n    success: () => {}\n  };\n\n  constructor(options?: HashmigConfig) {\n    this.folder = options?.folder || './hashmig_migrations';\n\n    this.table = options?.table || 'hashmig_migrations';\n    this.database = options?.db?.database || process.env.DB_SELECT;\n\n    this.initLogger(options?.logger, options?.silent);\n\n    this.db = new DbHelper(\n      options?.db || {\n        port: +(process.env.DB_PORT || 3306),\n        host: process.env.DB_SERVER,\n        database: process.env.DB_SELECT,\n        user: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n        ssl: { rejectUnauthorized: false }\n      }\n    );\n  }\n\n  private initLogger(logger?: LoggerEngine, silent?: boolean) {\n    if (silent) {\n      return;\n    }\n\n    if (this.instanceOfLoggerEngine(logger || {})) {\n      this.logger = logger as LoggerEngine;\n      return;\n    }\n\n    this.logger = new Logger();\n  }\n\n  private instanceOfLoggerEngine(object: any): object is LoggerEngine {\n    return ['log', 'info', 'warn', 'error', 'success'].reduce(\n      (result, method) => result && method in object,\n      true\n    );\n  }\n\n  public isMigrationsFolderExists(): boolean {\n    return fs.existsSync(this.folder);\n  }\n\n  public createMigrationsFolder() {\n    fs.mkdirSync(this.folder);\n  }\n\n  public async getProcedures(): Promise<{ Name: string; Modified: string }[]> {\n    return this.db\n      .query(`SHOW PROCEDURE STATUS WHERE Db = '${this.database}'`)\n      .then((results) => results as DBProcedureRow[])\n      .then((rows) =>\n        rows.map((row) => ({ Name: row.Name, Modified: row.Modified }))\n      );\n  }\n\n  public async getFunctions(): Promise<{ Name: string; Modified: string }[]> {\n    return this.db\n      .query(`SHOW FUNCTION STATUS WHERE Db = '${this.database}'`)\n      .then((results) => results as DBFunctionRow[])\n      .then((rows) =>\n        rows.map((row) => ({ Name: row.Name, Modified: row.Modified }))\n      );\n  }\n\n  public async getProcedureSource(name: string): Promise<string> {\n    return this.db\n      .query(`SHOW CREATE PROCEDURE ${name}`)\n      .then((results) => results as DBProcedureSourceRow[])\n      .then((results) => results[0]['Create Procedure']);\n  }\n\n  public async getFunctionSource(name: string): Promise<string> {\n    return this.db\n      .query(`SHOW CREATE FUNCTION ${name}`)\n      .then((results) => results as DBFunctionSourceRow[])\n      .then((results) => results[0]['Create Function']);\n  }\n\n  public async isMigrationsTableExists(): Promise<boolean> {\n    return this.db\n      .query(`SHOW TABLES LIKE '${this.table}'`)\n      .then((results) => results as { TABLE_NAME: string }[])\n      .then((results) => results.length > 0);\n  }\n\n  public async createMigrationsTable(): Promise<any> {\n    return this.db.query(`\n        CREATE TABLE ${this.table}\n        (\n            ID        INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n            FileName  VARCHAR(255)                   NOT NULL,\n            Hash      VARCHAR(312)                   NOT NULL,\n            Type      ENUM ('procedure', 'function') NOT NULL,\n            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n    `);\n  }\n\n  public async getMigrations(): Promise<DBMigrationRow[]> {\n    return (await this.db.query(`\n      SELECT FileName, Hash, Type\n       FROM ${this.table}\n       WHERE ID IN (\n          SELECT MAX(ID) FROM ${this.table} GROUP BY FileName\n       )\n    `)) as Promise<DBMigrationRow[]>;\n  }\n\n  public async initProcedures(procedures: string[]) {\n    const errors = [];\n    let i = 0;\n    for (const procedure of procedures) {\n      i++;\n      try {\n        await this.initProcedure(procedure);\n        this.logger.info(\n          `     ${i}. migration for procedure ${procedure} initialized`\n        );\n      } catch (error) {\n        errors.push(procedure);\n        this.logger.error(\n          `     ${i}. migration for procedure ${procedure} not initialized: ${\n            (error as Error).message\n          }`\n        );\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.error(\n        `     - migrations for procedures ${errors.join(', ')} not initialized`\n      );\n    }\n  }\n\n  private async initProcedure(procedure: string) {\n    let source = await this.getProcedureSource(procedure);\n    source = source.replace(/DEFINER=`[^`]+`@`[^`]+`/, '');\n    source = `DROP PROCEDURE IF EXISTS \\`${procedure}\\`;\n-- NEW_COMMAND\n${source}`;\n    const hash = this.getHash(source);\n    const fileName = `p_${procedure}.sql`;\n\n    fs.writeFileSync(`${this.folder}/${fileName}`, source);\n\n    await this.db.query(\n      `INSERT INTO ${this.table} (FileName, Hash, Type)\n                         VALUES (?, ?, 'procedure')`,\n      [fileName, hash]\n    );\n  }\n\n  public async initFunctions(functions: string[]) {\n    const errors = [];\n    let i = 0;\n    for (const func of functions) {\n      i++;\n      try {\n        await this.initFunction(func);\n        this.logger.info(\n          `     ${i}. migration for function ${func} initialized`\n        );\n      } catch (error) {\n        errors.push(func);\n        this.logger.error(\n          `     ${i}. migration for function ${func} not initialized: ${\n            (error as Error).message\n          }`\n        );\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.error(\n        `     - migrations for functions ${errors.join(', ')} not initialized`\n      );\n    }\n  }\n\n  private async initFunction(func: string) {\n    let source = await this.getFunctionSource(func);\n    source = source.replace(/DEFINER=`[^`]+`@`[^`]+`/, '');\n    source = `DROP PROCEDURE IF EXISTS \\`${func}\\`;\n-- NEW_COMMAND\n${source}`;\n    const hash = this.getHash(source);\n    const fileName = `f_${func}.sql`;\n\n    fs.writeFileSync(`${this.folder}/${fileName}`, source);\n\n    await this.db.query(\n      `INSERT INTO ${this.table} (FileName, Hash, Type)\n                         VALUES (?, ?, 'function')`,\n      [fileName, hash]\n    );\n  }\n\n  private getHash(source: string) {\n    return SQLHash(source);\n    // return crypto.createHash('sha256').update(source).digest('hex');\n  }\n\n  public async getMigrationsFiles(): Promise<Map<string, string>> {\n    const map = new Map();\n    const files = fs.readdirSync(this.folder);\n    for (const file of files) {\n      const source = fs.readFileSync(`${this.folder}/${file}`).toString();\n      const hash = this.getHash(source);\n      map.set(hash, file);\n    }\n    return map;\n  }\n\n  public async getMigrationsToRun(): Promise<Map<string, string>> {\n    const dbMigrations = await this.getMigrations().then((rows) =>\n      rows.reduce((map, row) => {\n        map.set(row.Hash, row.FileName);\n        return map;\n      }, new Map())\n    );\n    const filesMap = await this.getMigrationsFiles();\n\n    for (const [hash, file] of filesMap) {\n      if (dbMigrations.has(hash) && dbMigrations.get(hash) === file) {\n        // this.logger.log(`     - ${file} already migrated`);\n        filesMap.delete(hash);\n      } else {\n        this.logger.log(`     + ${file} will be migrated`);\n      }\n    }\n\n    return filesMap;\n  }\n\n  public async runMigrations(files: string[]) {\n    const errors = [];\n    let i = 0;\n    for (const file of files) {\n      i++;\n      try {\n        await this.migrateFile(file);\n        this.logger.info(`     ${i}. migration for file ${file} completed`);\n      } catch (error) {\n        errors.push(file);\n        this.logger.error(\n          `     ${i}. migration for file ${file} not completed: ${\n            (error as Error).message\n          }`\n        );\n      }\n    }\n\n    if (errors.length > 0) {\n      this.logger.error(\n        `     - migrations for files ${errors.join(', ')} not completed`\n      );\n    }\n  }\n\n  private async migrateFile(file: string) {\n    const source = fs.readFileSync(`${this.folder}/${file}`).toString();\n    const hash = this.getHash(source);\n\n    await this.runFileSql(source);\n    await this.db.query(\n      `INSERT INTO ${this.table} (FileName, Hash, Type)\n                         VALUES (?, ?, 'function')`,\n      [file, hash]\n    );\n  }\n\n  public async clear() {\n    await this.clearDb();\n    this.clearFolder();\n  }\n\n  private async clearDb() {\n    await this.db.query(`DROP TABLE IF EXISTS ${this.table}`);\n    this.logger.success('--- Migrations table dropped');\n  }\n\n  private clearFolder() {\n    fs.rmSync(this.folder, { recursive: true, force: true });\n    this.logger.success('--- Migrations folder removed');\n  }\n\n  private async runFileSql(sql: string) {\n    const commands = sql.toString().split('NEW_COMMAND');\n    return Promise.all(\n      commands\n        .map((command) => command.trim())\n        .filter(Boolean)\n        .map((command) => this.db.query(command))\n    );\n  }\n}\n","import crypto from 'crypto';\n\nconst SQLHash = (sql: string, marker = '_@#$^*_') => {\n  const parts: string[] = [];\n  let i = -1;\n  let source = sql\n    .replace(/\\n/g, ' ')\n    .replace(/\\t/g, ' ')\n    .replace(/\\\\'/g, `${marker}single${marker}`)\n    .replace(/\\\\\"/g, `${marker}double${marker}`)\n    .replace(/'.*?'/g, (match) => {\n      parts.push(match);\n      i++;\n      return `${marker}${i}${marker}`;\n    })\n    .replace(/\".*?\"/g, (match) => {\n      parts.push(match);\n      i++;\n      return `${marker}${i}${marker}`;\n    })\n    .replace(/\\s{2,}/g, ' ');\n\n  parts.forEach((part, i) => {\n    source = source.replace(`${marker}${i}${marker}`, part);\n  });\n\n  return crypto.createHash('sha256').update(source).digest('hex');\n};\n\nexport default SQLHash;\n","import { HashmigConfig } from './interfaces';\nimport fs from 'fs';\nimport { z } from 'zod';\nimport Pipe from '@rsol/pipe';\n\nexport default class ConfigLoader {\n  private static fileName = './hashmig.config.json';\n\n  public static getConfig(\n    configFileName = './hashmig.config.json'\n  ): HashmigConfig | null {\n    this.fileName = configFileName;\n    const fileConfig = this.loadConfigFromFile();\n    if (fileConfig) {\n      return fileConfig;\n    }\n    const envConfig = this.getConfigFromEnv();\n    if (envConfig) {\n      return envConfig;\n    }\n    return null;\n  }\n\n  private static getConfigFromEnv(): HashmigConfig {\n    const config = {\n      db: {\n        port: +(process.env.DB_PORT || 3306),\n        host: process.env.DB_SERVER,\n        database: process.env.DB_SELECT,\n        user: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n        ssl: { rejectUnauthorized: false }\n      },\n      folder: process.env.HASHMIG_FOLDER || './hashmig_migrations',\n      table: process.env.HASHMIG_TABLE || 'hashmig_migrations',\n      silent: process.env.HASHMIG_SILENT === 'true'\n    };\n\n    return this.validateAndFillConfig(config) as HashmigConfig;\n  }\n\n  private static loadConfigFromFile(): HashmigConfig | null {\n    if (!fs.existsSync(`${this.fileName}`)) {\n      return null;\n    }\n    const json = fs.readFileSync(`${this.fileName}`).toString();\n    return this.validateAndFillConfig(JSON.parse(json));\n  }\n\n  private static validateAndFillConfig(\n    config: HashmigConfig\n  ): HashmigConfig | null {\n    const configSchema = z.object({\n      db: z.object({\n        port: z.string().or(z.number()),\n        host: z.string(),\n        database: z.string(),\n        user: z.string(),\n        password: z.string(),\n        ssl: z.object({ rejectUnauthorized: z.boolean().or(z.string()) })\n      }),\n      folder: z.string(),\n      table: z.string(),\n      silent: z.string().or(z.boolean())\n    });\n\n    try {\n      configSchema.parse(config);\n\n      const trueConfigSchema = z.object({\n        db: z.object({\n          port: z.number(),\n          host: z.string(),\n          database: z.string(),\n          user: z.string(),\n          password: z.string(),\n          ssl: z.object({ rejectUnauthorized: z.boolean() })\n        }),\n        folder: z.string(),\n        table: z.string(),\n        silent: z.boolean()\n      });\n\n      const pipe = new Pipe().addHandler(\n        'env',\n        () => (str, initialValueString) =>\n          process.env[str] || initialValueString\n      );\n\n      const trueConfig = {\n        db: {\n          port: pipe.pipe(`${config.db?.port || 3306}|toInt`),\n          host: pipe.pipe(config.db?.host || ''),\n          database: pipe.pipe(config.db?.database || ''),\n          user: pipe.pipe(config.db?.user || ''),\n          password: pipe.pipe(config.db?.password || ''),\n          ssl: config.db.ssl\n        },\n        folder: pipe.pipe(config.folder || ''),\n        table: pipe.pipe(config.table || ''),\n        silent:\n          config.silent === true\n            ? true\n            : config.silent === false\n              ? false\n              : pipe.pipe(config.silent || 'false|toBool')\n      };\n\n      return trueConfigSchema.parse(trueConfig) as HashmigConfig;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }\n}\n","import prompts from 'prompts';\nimport { Command } from 'commander';\nimport Hashmig from './Hashmig';\nimport Logger from './Logger';\nimport ConfigLoader from './ConfigLoader';\n\nconst program = new Command();\n\nexport default class Interact {\n  private hashmig: Hashmig;\n  private logger: Logger;\n\n  private isInteractive = true;\n\n  constructor() {\n    this.logger = new Logger();\n    this.hashmig = new Hashmig();\n  }\n\n  init(configFileName?: string) {\n    const config = ConfigLoader.getConfig(configFileName);\n    if (!config) {\n      console.log('Config not found');\n      process.exit(1);\n    }\n\n    this.hashmig = new Hashmig({\n      ...config,\n      silent: false\n    });\n  }\n\n  main = async () => {\n    program\n      .name('hashmig')\n      .description(\n        'CLI migrations tool for MySQL stored procedures and functions'\n      )\n      .version('1.0.2')\n      .option(\n        '-c, --config <string>',\n        'Path to config file',\n        './hashmig.config.json'\n      )\n      .hook('preAction', (thisArg) => {\n        const { config: configFileName } = thisArg.opts();\n        this.init(configFileName);\n      });\n\n    program.addHelpText(\n      'after',\n      `\n\nTo configure, you can use \\`./hashmig.config.json\\` (see \\`./hashmig.example.config.json\\`) file or the following environment variables:\n  DB_PORT - post number\n  DB_SERVER - server address\n  DB_SELECT - database name\n  DB_USERNAME - username\n  DB_PASSWORD - password\n  HASHMIG_FOLDER - path to folder with migrations\n  HASHMIG_TABLE - name of table with migrations\n  HASHMIG_SILENT - disable logger`\n    );\n\n    program\n      .command('run')\n      .description('Execute migrations')\n      .option('-n, --noninteractive', 'Non-interactive mode', false)\n      .action((options) => {\n        const { noninteractive = false } = options;\n        this.isInteractive = !noninteractive;\n\n        (async () => {\n          // ----------------------------------- Table -----------------------------------\n          let result = await this.createMigrationsTableExists();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Folder -----------------------------------\n          result = await this.createMigrationFolder();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Init -----------------------------------\n          this.isInteractive && (await this.initMigrations());\n\n          // ----------------------------------- Run -----------------------------------\n          await this.runMigrations();\n\n          process.exit(0);\n        })();\n      });\n\n    program\n      .command('clear')\n      .description('Clear folder and table')\n      .action(() => {\n        (async () => {\n          const { value } = await prompts({\n            type: 'toggle',\n            name: 'value',\n            message: 'Are you sure to delete table and folder?',\n            initial: true,\n            active: 'yes',\n            inactive: 'no'\n          });\n\n          if (!value) {\n            process.exit(0);\n          }\n\n          await this.hashmig.clear();\n        })();\n      });\n\n    program\n      .command('init')\n      .description(\n        'Fill table and folder by existing stored procedures and functions'\n      )\n      .action(() => {\n        (async () => {\n          // ----------------------------------- Table -----------------------------------\n          let result = await this.createMigrationsTableExists();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Folder -----------------------------------\n          result = await this.createMigrationFolder();\n          if (!result) {\n            process.exit(0);\n          }\n\n          // ----------------------------------- Init -----------------------------------\n          await this.initMigrations(true);\n        })();\n      });\n\n    program.parse();\n  };\n\n  createMigrationsTableExists = async () => {\n    const isMigrationsTableExists =\n      await this.hashmig.isMigrationsTableExists();\n    if (isMigrationsTableExists) {\n      return true;\n    }\n\n    await this.hashmig.createMigrationsTable();\n    this.logger.success('--- Migration table created');\n\n    return true;\n  };\n\n  createMigrationFolder = async () => {\n    const isMigrationFolderExists = this.hashmig.isMigrationsFolderExists();\n    if (isMigrationFolderExists) {\n      return true;\n    }\n\n    this.hashmig.createMigrationsFolder();\n    this.logger.success('--- Migration folder created');\n\n    return true;\n  };\n\n  initMigrations = async (required = false) => {\n    const migrations = await this.hashmig.getMigrations();\n    if (!required && migrations.length > 0) {\n      return;\n    }\n\n    const { value } = await prompts({\n      type: 'toggle',\n      name: 'value',\n      message:\n        'Would you like to initialize migrations by existing stored procedures and functions it?',\n      initial: true,\n      active: 'yes',\n      inactive: 'no'\n    });\n\n    if (!value) {\n      this.logger.error('--- Migrations don\\'t initialized');\n      return;\n    }\n\n    const functions = await this.hashmig.getFunctions();\n    const { value: selectedFunctions } = await prompts({\n      type: 'multiselect',\n      name: 'value',\n      message: 'Select functions',\n      choices: functions.map((func) => ({\n        title: func.Name,\n        value: func.Name,\n        selected: true\n      }))\n    });\n\n    const procedures = await this.hashmig.getProcedures();\n    const { value: selectedProcedures } = await prompts({\n      type: 'multiselect',\n      name: 'value',\n      message: 'Select procedures',\n      choices: procedures.map((proc) => ({\n        title: proc.Name,\n        value: proc.Name,\n        selected: true\n      }))\n    });\n\n    if (selectedProcedures.length > 0) {\n      await this.hashmig.initProcedures(selectedProcedures);\n      this.logger.success('--- Migration for procedures initialized');\n    }\n\n    if (selectedFunctions.length > 0) {\n      await this.hashmig.initFunctions(selectedFunctions);\n      this.logger.success('--- Migration for functions initialized');\n    }\n  };\n\n  runMigrations = async () => {\n    const migrations = await this.hashmig.getMigrationsToRun();\n\n    if (migrations.size === 0) {\n      this.logger.success('--- All migrations already completed');\n      return;\n    }\n\n    if (!this.isInteractive) {\n      await this.hashmig.runMigrations(Array.from(migrations.values()));\n      this.logger.success('--- Migrations completed');\n      return;\n    }\n\n    const { value: selectedFiles } = await prompts({\n      type: 'multiselect',\n      name: 'value',\n      message: 'Select files to run',\n      choices: Array.from(migrations.values()).map((file) => ({\n        title: file,\n        value: file,\n        selected: true\n      }))\n    });\n\n    if (selectedFiles.length === 0) {\n      this.logger.error('--- No one file selected');\n      return;\n    }\n\n    await this.hashmig.runMigrations(selectedFiles);\n\n    this.logger.success('--- Migrations completed');\n  };\n}\n","#!/usr/bin/env node\n\nimport '../env';\nimport Interact from './Interact';\n\n(async () => {\n  return new Interact().main();\n})();\n"],"names":["dotenv","config","DbHelper","access","conn","this","connect","_proto","prototype","mysql","createConnection","query","sql","values","_this","Promise","resolve","reject","_this$conn","err","results","e","execute","_this2","_this2$conn","Logger","silent","log","message","console","kleur","gray","italic","info","green","warn","red","error","success","bgGreen","bold","Hashmig","options","_options$db","db","folder","database","table","logger","process","env","DB_SELECT","initLogger","port","DB_PORT","host","DB_SERVER","user","DB_USERNAME","password","DB_PASSWORD","ssl","rejectUnauthorized","instanceOfLoggerEngine","object","reduce","result","method","isMigrationsFolderExists","fs","existsSync","createMigrationsFolder","mkdirSync","getProcedures","then","rows","map","row","Name","Modified","getFunctions","getProcedureSource","name","getFunctionSource","isMigrationsTableExists","_this5","length","createMigrationsTable","getMigrations","_this7","initProcedures","procedures","_temp3","errors","_this8","join","i","_temp2","_forOf","procedure","_temp","_catch","initProcedure","push","_this9","source","replace","hash","getHash","fileName","writeFileSync","initFunctions","functions","_temp6","_this10","_temp5","func","_temp4","initFunction","_this11","marker","parts","match","forEach","part","crypto","createHash","update","digest","SQLHash","getMigrationsFiles","_step","_this12","Map","_iterator","_createForOfIteratorHelperLoose","readdirSync","done","file","value","readFileSync","toString","set","getMigrationsToRun","_this13","Hash","FileName","dbMigrations","filesMap","_step2","_iterator2","_step2$value","has","get","runMigrations","files","_temp9","_this14","_temp8","_temp7","migrateFile","_this15","runFileSql","clear","_this16","clearDb","clearFolder","_this17","rmSync","recursive","force","_this18","commands","split","all","command","trim","filter","Boolean","_iteratorSymbol","Symbol","iterator","_settle","pact","state","s","_Pact","o","bind","v","observer","onFulfilled","onRejected","callback","_isSettledPact","thenable","body","check","target","step","_cycle","next","_fixup","TypeError","array","_forTo","ConfigLoader","getConfig","configFileName","loadConfigFromFile","getConfigFromEnv","HASHMIG_FOLDER","HASHMIG_TABLE","HASHMIG_SILENT","validateAndFillConfig","json","JSON","parse","configSchema","z","string","or","number","_config$db","_config$db2","_config$db3","_config$db4","_config$db5","trueConfigSchema","pipe","Pipe","addHandler","str","initialValueString","trueConfig","program","Command","Interact","_this3","_this4","hashmig","isInteractive","main","description","version","option","hook","thisArg","_thisArg$opts","opts","init","addHelpText","action","_options$noninteracti","noninteractive","createMigrationsTableExists","exit","createMigrationFolder","_this$createMigration","_this$initMigrations","_this$isInteractive","initMigrations","prompts","type","initial","active","inactive","_ref","_this$createMigration2","required","migrations","_ref2","choices","title","selected","_ref3","selectedFunctions","proc","_ref4","selectedProcedures","_exit","_result","Array","from","_ref5","selectedFiles","size","_extends"],"mappings":"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"}